/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.alure.alure;

private {
    import derelict.util.loader;
    import derelict.util.system;

    static if( Derelict_OS_Windows )
        enum libNames = "ALURE32.dll";
    else static if( Derelict_OS_Mac )
        enum libNames = "libalure.dylib";
    else static if( Derelict_OS_Posix )
        enum libNames = "libalure.so, libalure.so.1";
    else
        static assert( 0, "Need to implement ALURE libNames for this operating system." );
}

public import derelict.openal.al;

enum ALURE_VERSION_1_2 = true;

alias alureInt64 = long;

struct alureStream;

extern( C ) {
    alias alureInstallDecodeCallbacks_open_file = void* function( ALchar* );
    alias alureInstallDecodeCallbacks_open_memory = void* function( ALubyte*, ALuint );
    alias alureInstallDecodeCallbacks_get_format = ALboolean function( void*, ALenum*, ALuint*, ALuint* );
    alias alureInstallDecodeCallbacks_decode = ALuint function( void*, ALubyte*, ALuint );
    alias alureInstallDecodeCallbacks_rewind = ALboolean function( void* );
    alias alureInstallDecodeCallbacks_close = void function( void* );

    alias alureCreateStreamFromCallback_callback = ALuint function( void*, ALubyte*, ALuint );

    alias alureSetIOCallbacks_open_callback = void* function( char*, ALuint );
    alias alureSetIOCallbacks_close_callback = void function( char* );
    alias alureSetIOCallbacks_read_callback = ALsizei function( void*, ALubyte*, ALuint );
    alias alureSetIOCallbacks_write_callback = ALsizei function( void*, ALubyte*, ALuint );
    alias alureSetIOCallbacks_seek_callback = alureInt64 function( void*, alureInt64, int );

    alias alurePlaySourceStream_eos_callback = void function( void*, ALuint );
    alias alurePlaySource_callback = void function( void*, ALuint );
}

extern( C ) nothrow {
    alias da_alureGetVersion = void function( ALuint*, ALuint* );
    alias da_alureGetErrorString = ALchar* function();
    alias da_alureGetDeviceNames = ALCchar** function( ALCboolean all, ALCsizei* );
    alias da_alureFreeDeviceNames = void function( ALCchar** );
    alias da_alureInitDevice = ALCboolean function( ALCchar*, ALCint* );
    alias da_alureShutdownDevice = ALCboolean function();
    alias da_alureGetSampleFormat = ALenum function( ALuint, ALuint, ALuint );
    alias da_alureInstallDecodeCallbacks = ALboolean function( ALint,
        alureInstallDecodeCallbacks_open_file,
        alureInstallDecodeCallbacks_open_memory,
        alureInstallDecodeCallbacks_get_format,
        alureInstallDecodeCallbacks_decode,
        alureInstallDecodeCallbacks_rewind, alureInstallDecodeCallbacks_close );
    alias da_alureSleep = ALboolean function( ALfloat );
    alias da_alureGetProcAddress = void* function( ALchar* );

    alias da_alureCreateBufferFromFile = ALuint function( ALchar* );
    alias da_alureCreateBufferFromMemory = ALuint function( ALubyte*, ALsizei );
    alias da_alureBufferDataFromFile = ALboolean function( ALchar*, ALuint );
    alias da_alureBufferDataFromMemory = ALboolean function( ALubyte*, ALsizei, ALuint );

    alias da_alureStreamSizeIsMicroSec = ALboolean function( ALboolean );
    alias da_alureCreateStreamFromFile = alureStream* function( ALchar*, ALsizei, ALsizei, ALuint* );
    alias da_alureCreateStreamFromMemory = alureStream* function( ALubyte*, ALuint, ALsizei, ALsizei, ALuint* );
    alias da_alureCreateStreamFromStaticMemory = alureStream* function( ALubyte*, ALuint, ALsizei, ALsizei, ALuint* );
    alias da_alureCreateStreamFromCallback = alureStream* function( alureCreateStreamFromCallback_callback,
        void*, ALenum, ALuint,ALsizei, ALsizei, ALuint* );
    alias da_alureGetStreamFrequency = ALsizei function( alureStream* );
    alias da_alureBufferDataFromStream = ALsizei function( alureStream*, ALsizei, ALuint* );
    alias da_alureRewindStream = ALboolean function( alureStream*, ALsizei );
    alias da_alureSetStreamOrder = ALboolean function( alureStream*, ALuint );
    alias da_alureSetStreamPatchset = ALboolean function( alureStream*, ALchar* );
    alias da_alureGetStreamLength = alureInt64 function( alureStream* );
    alias da_alureDestroyStream = ALboolean function( alureStream*, ALsizei, ALuint* );

    alias da_alureSetIOCallbacks = ALboolean function( alureSetIOCallbacks_open_callback,
        alureSetIOCallbacks_close_callback,
        alureSetIOCallbacks_read_callback,
        alureSetIOCallbacks_write_callback, alureSetIOCallbacks_seek_callback );

    alias da_alurePlaySourceStream = ALboolean function( ALuint, alureStream*, ALsizei, ALsizei, alurePlaySourceStream_eos_callback, void* );
    alias da_alurePlaySource = ALboolean function( ALuint, alurePlaySource_callback, void* );
    alias da_alureStopSource = ALboolean function( ALuint, ALboolean );
    alias da_alurePauseSource = ALboolean function( ALuint );
    alias da_alureResumeSource = ALboolean function( ALuint );
    alias da_alureUpdate = void function();
    alias da_alureUpdateInterval = ALboolean function( ALfloat );
}

__gshared {
    da_alureGetVersion alureGetVersion;
    da_alureGetErrorString alureGetErrorString;
    da_alureGetDeviceNames alureGetDeviceNames;
    da_alureFreeDeviceNames alureFreeDeviceNames;
    da_alureInitDevice alureInitDevice;
    da_alureShutdownDevice alureShutdownDevice;
    da_alureGetSampleFormat alureGetSampleFormat;
    da_alureInstallDecodeCallbacks alureInstallDecodeCallbacks;
    da_alureSleep alureSleep;
    da_alureGetProcAddress alureGetProcAddress;

    da_alureCreateBufferFromFile alureCreateBufferFromFile;
    da_alureCreateBufferFromMemory alureCreateBufferFromMemory;
    da_alureBufferDataFromFile alureBufferDataFromFile;
    da_alureBufferDataFromMemory alureBufferDataFromMemory;

    da_alureStreamSizeIsMicroSec alureStreamSizeIsMicroSec ;
    da_alureCreateStreamFromFile alureCreateStreamFromFile;
    da_alureCreateStreamFromMemory alureCreateStreamFromMemory;
    da_alureCreateStreamFromStaticMemory alureCreateStreamFromStaticMemory;
    da_alureCreateStreamFromCallback alureCreateStreamFromCallback;
    da_alureGetStreamFrequency alureGetStreamFrequency;
    da_alureBufferDataFromStream alureBufferDataFromStream;
    da_alureRewindStream alureRewindStream;
    da_alureSetStreamOrder alureSetStreamOrder;
    da_alureSetStreamPatchset alureSetStreamPatchset;
    da_alureGetStreamLength alureGetStreamLength;
    da_alureDestroyStream alureDestroyStream;

    da_alureSetIOCallbacks alureSetIOCallbacks;

    da_alurePlaySourceStream alurePlaySourceStream;
    da_alurePlaySource alurePlaySource;
    da_alureStopSource alureStopSource;
    da_alurePauseSource alurePauseSource;
    da_alureResumeSource alureResumeSource;
    da_alureUpdate alureUpdate;
    da_alureUpdateInterval alureUpdateInterval;
}

class DerelictALURELoader : SharedLibLoader {
    protected override void loadSymbols() {
        bindFunc( cast( void** )&alureGetVersion, "alureGetVersion" );
        bindFunc( cast( void** )&alureGetErrorString, "alureGetErrorString" );
        bindFunc( cast( void** )&alureGetDeviceNames, "alureGetDeviceNames" );
        bindFunc( cast( void** )&alureFreeDeviceNames, "alureFreeDeviceNames" );
        bindFunc( cast( void** )&alureInitDevice, "alureInitDevice" );
        bindFunc( cast( void** )&alureShutdownDevice, "alureShutdownDevice" );
        bindFunc( cast( void** )&alureGetSampleFormat, "alureGetSampleFormat" );
        bindFunc( cast( void** )&alureInstallDecodeCallbacks, "alureInstallDecodeCallbacks" );
        bindFunc( cast( void** )&alureSleep, "alureSleep" );
        bindFunc( cast( void** )&alureGetProcAddress, "alureGetProcAddress" );

        bindFunc( cast( void** )&alureCreateBufferFromFile, "alureCreateBufferFromFile" );
        bindFunc( cast( void** )&alureCreateBufferFromMemory, "alureCreateBufferFromMemory" );
        bindFunc( cast( void** )&alureBufferDataFromFile, "alureBufferDataFromFile" );
        bindFunc( cast( void** )&alureBufferDataFromMemory, "alureBufferDataFromMemory" );

        bindFunc( cast( void** )&alureStreamSizeIsMicroSec, "alureStreamSizeIsMicroSec" );
        bindFunc( cast( void** )&alureCreateStreamFromFile, "alureCreateStreamFromFile" );
        bindFunc( cast( void** )&alureCreateStreamFromMemory, "alureCreateStreamFromMemory" );
        bindFunc( cast( void** )&alureCreateStreamFromStaticMemory, "alureCreateStreamFromStaticMemory" );
        bindFunc( cast( void** )&alureCreateStreamFromCallback, "alureCreateStreamFromCallback" );
        bindFunc( cast( void** )&alureGetStreamFrequency, "alureGetStreamFrequency" );
        bindFunc( cast( void** )&alureBufferDataFromStream, "alureBufferDataFromStream" );
        bindFunc( cast( void** )&alureRewindStream, "alureRewindStream" );
        bindFunc( cast( void** )&alureSetStreamOrder, "alureSetStreamOrder" );
        bindFunc( cast( void** )&alureSetStreamPatchset, "alureSetStreamPatchset" );
        bindFunc( cast( void** )&alureGetStreamLength, "alureGetStreamLength" );
        bindFunc( cast( void** )&alureDestroyStream, "alureDestroyStream" );

        bindFunc( cast( void** )&alureSetIOCallbacks, "alureSetIOCallbacks" );

        bindFunc( cast( void** )&alurePlaySourceStream, "alurePlaySourceStream" );
        bindFunc( cast( void** )&alurePlaySource, "alurePlaySource" );
        bindFunc( cast( void** )&alureStopSource, "alureStopSource" );
        bindFunc( cast( void** )&alurePauseSource, "alurePauseSource" );
        bindFunc( cast( void** )&alureResumeSource, "alureResumeSource" );
        bindFunc( cast( void** )&alureUpdate, "alureUpdate" );
        bindFunc( cast( void** )&alureUpdateInterval, "alureUpdateInterval" );
    }

    public this() {
        super( libNames );
    }
}

__gshared DerelictALURELoader DerelictALURE;

shared static this() {
    DerelictALURE = new DerelictALURELoader();
}